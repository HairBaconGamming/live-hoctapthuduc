<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title><%= room.title %> - Live Room</title>
  <link rel="stylesheet" href="/style.css">
  <link rel="icon" type="image/png" href="https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/823029_library_512x512.png?v=1741523759119">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    /* ===== Global Layout ===== */
    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #1e1e2f, #252536);
      color: #f1f1f1;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }
    header {
      height: 60px;
      background: #111;
      color: #fff;
      display: flex;
      align-items: center;
      padding: 0 20px;
    }
    header h1 {
      font-size: 1.4em;
      margin-right: auto;
    }
    header p {
      margin-left: auto;
    }
    .main-content {
      display: flex;
      width: 100%;
      height: calc(100vh - 60px); /* trừ header */
    }
    /* ===== Video Area ===== */
    .video-area {
      flex: 1;
      background: #000;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      position: relative;
    }
    .video-wrapper {
      width: 100%;
      position: relative;
      /* Sử dụng aspect-ratio để giữ tỉ lệ 16:9 */
      aspect-ratio: 16/9;
    }
    .video-element {
      width: 100%;
      height: 100%;
      background: #333;
      border: 2px solid #00ffea;
      border-radius: 8px;
      box-shadow: 0 0 15px rgba(0,255,234,0.6);
      object-fit: cover;
    }
    .video-placeholder {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #aaa;
      font-size: 1.2em;
      background: rgba(0,0,0,0.6);
    }
    /* ===== Chat Area ===== */
    .chat-area {
      width: 350px;
      background: #2c2c3a;
      display: flex;
      flex-direction: column;
      transition: width 0.3s ease;
      position: relative;
    }
    .chat-header {
      background: rgba(0,0,0,0.7);
      padding: 10px;
      display: flex;
      align-items: center;
      min-height: 52px;
      color: #fff;
    }
    .chat-header span {
      flex-grow: 1;
    }
    .chat-header button {
      margin-left: auto;
      background: #ff7cf7;
      border: none;
      border-radius: 4px;
      color: #fff;
      cursor: pointer;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    /* Bọc nội dung chat (tin nhắn và input) */
    #chatContent {
      display: flex;
      flex-direction: column;
      height: 100%;
      transition: height 0.3s, opacity 0.3s;
    }
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
    }
    .chat-messages li {
      background: #3a3a50;
      margin-bottom: 8px;
      padding: 8px;
      border-radius: 8px;
      color: #eaeaea;
    }
    .chat-input {
      padding: 10px;
      display: flex;
      gap: 10px;
      background: #2c2c3a;
    }
    .chat-input input {
      flex: 1;
      background: #1e1e2f;
      border: 1px solid #555;
      border-radius: 8px;
      color: #fff;
      padding: 8px;
    }
    .chat-input button {
      background: linear-gradient(90deg, #ff7cf7, #a75fff);
      border: none;
      border-radius: 8px;
      color: #fff;
      padding: 8px 16px;
      cursor: pointer;
      box-shadow: 0 0 10px rgba(255,124,247,0.5);
    }
    /* Khi chat bị thu gọn: ẩn nội dung nhưng vẫn giữ header */
    .chat-hidden {
      width: 50px;
    }
    .chat-hidden #chatContent {
      height: 0;
      opacity: 0;
      overflow: hidden;
    }
    .chat-hidden .chat-header span {
      display: none;
    }
  </style>
</head>
<body>
  <header>
    <h1 class="live-title">
      <i class="fas fa-video"></i>
      Live Stream: <span class="stream-title"><%= room.title %></span>
    </h1>
    <p>Người xem: <span id="viewerCount">0</span></p>
  </header>
  <div class="main-content" id="mainContent">
    <!-- Video Area -->
    <div class="video-area">
      <div class="video-wrapper">
        <video id="liveVideo" class="video-element" autoplay playsinline controls muted></video>
        <div id="placeholder" class="video-placeholder">
          Chủ phòng hiện chưa chia sẻ màn hình
        </div>
      </div>
    </div>
    <!-- Chat Area -->
    <div class="chat-area" id="chatArea">
      <div class="chat-header">
        <span>Phòng Chat</span>
        <!-- Nút toggle luôn hiển thị -->
        <button id="toggleChatBtn"><i class="fas fa-chevron-right"></i></button>
      </div>
      <div id="chatContent">
        <ul class="chat-messages" id="chatMessages"></ul>
        <div class="chat-input">
          <input type="text" id="messageInput" placeholder="Nhập tin nhắn..." autocomplete="off" />
          <button id="sendBtn">Gửi</button>
        </div>
      </div>
    </div>
  </div>
  
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Socket.IO & Chat logic
    const socket = io();
    const roomId = "<%= room.id %>";
    const username = "<%= user.username %>";
    const viewerCount = document.getElementById("viewerCount");
    const chatMessages = document.getElementById("chatMessages");
    const messageInput = document.getElementById("messageInput");
    const sendBtn = document.getElementById("sendBtn");

    socket.emit("joinRoom", { roomId, username });
    socket.on("userJoined", msg => {
      const li = document.createElement("li");
      li.innerHTML = `<i>${msg}</i>`;
      chatMessages.appendChild(li);
    });
    socket.on("newMessage", data => {
      const li = document.createElement("li");
      li.textContent = `${data.username}: ${data.message}`;
      chatMessages.appendChild(li);
    });
    socket.on("updateViewers", count => {
      viewerCount.textContent = count;
    });
    sendBtn.addEventListener("click", () => {
      const msg = messageInput.value.trim();
      if (!msg) return;
      socket.emit("chatMessage", { roomId, username, message: msg });
      messageInput.value = "";
    });
    messageInput.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        sendBtn.click();
      }
    });

    // Toggle Chat Area: chỉ ẩn nội dung chat (chatContent), giữ lại header với nút toggle
    const toggleChatBtn = document.getElementById("toggleChatBtn");
    const chatArea = document.getElementById("chatArea");
    const chatContent = document.getElementById("chatContent");
    toggleChatBtn.addEventListener("click", () => {
      if (chatContent.style.height === "0px" || chatContent.style.opacity === "0") {
        chatContent.style.height = "";
        chatContent.style.opacity = "1";
        chatArea.style.width = "350px";
        toggleChatBtn.innerHTML = '<i class="fas fa-chevron-right"></i>';
      } else {
        chatContent.style.height = "0";
        chatContent.style.opacity = "0";
        chatArea.style.width = "50px";
        toggleChatBtn.innerHTML = '<i class="fas fa-chevron-left"></i>';
      }
    });

    // WebRTC logic để nhận stream từ chủ phòng
    let pc;
    socket.on("webrtcOffer", async ({ offer, roomId: offerRoomId }) => {
      if (offerRoomId !== roomId) return;
      // Tạo RTCPeerConnection cho viewer
      pc = new RTCPeerConnection({ iceServers: [{ urls: "stun:stun.l.google.com:19302" }] });
      
      pc.ontrack = event => {
        const remoteStream = event.streams[0];
        // Use the actual video element ID ("liveVideo") instead of "streamVideo"
        const liveVideo = document.getElementById("liveVideo");
        if (liveVideo) {
          liveVideo.srcObject = remoteStream;
          document.getElementById("placeholder").style.display = "none";
        } else {
          console.error("Live video element not found.");
        }
      };
      
      pc.onicecandidate = event => {
        if (event.candidate) {
          socket.emit("webrtcCandidate", { roomId, candidate: event.candidate });
        }
      };
      
      await pc.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      socket.emit("webrtcAnswer", { roomId, answer });
    });
    
    socket.on("webrtcCandidate", async ({ candidate, roomId: candidateRoomId }) => {
      if (candidateRoomId !== roomId || !pc) return;
      try {
        await pc.addIceCandidate(new RTCIceCandidate(candidate));
      } catch (e) {
        console.error("Error adding ICE candidate", e);
      }
    });
  </script>
</body>
</html>
