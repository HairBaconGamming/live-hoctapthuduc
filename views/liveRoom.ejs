<!-- app/views/liveRoom.ejs -->
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title><%= room.title %> - Live Room</title>
  <link rel="stylesheet" href="/style.css">
  <link rel="icon" type="image/png" href="https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/823029_library_512x512.png?v=1741523759119">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    /* (CSS nh∆∞ c≈©) */
    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #1e1e2f, #252536);
      color: #f1f1f1;
      margin: 0;
      padding: 0;
      overflow: hidden;
    }
    header {
      height: 60px;
      background: #111;
      color: #fff;
      display: flex;
      align-items: center;
      padding: 0 20px;
    }
    header h1 {
      font-size: 1.4em;
      margin-right: auto;
    }
    header p {
      margin-left: auto;
    }
    .main-content {
      display: flex;
      width: 100%;
      height: calc(100vh - 60px);
    }
    .video-area {
      flex: 1;
      background: #000;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      position: relative;
    }
    .video-wrapper {
      width: 100%;
      position: relative;
      aspect-ratio: 16/9;
    }
    .video-element {
      width: 100%;
      height: 100%;
      background: #333;
      border: 2px solid #00ffea;
      border-radius: 8px;
      box-shadow: 0 0 15px rgba(0,255,234,0.6);
      object-fit: cover;
    }
    .video-placeholder {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #aaa;
      font-size: 1.2em;
      background: rgba(0,0,0,0.6);
    }
    /* Chat styles ... */
  </style>
</head>
<body>
  <header>
    <h1 class="live-title">
      <i class="fas fa-video"></i>
      Live Stream: <span class="stream-title"><%= room.title %></span>
    </h1>
    <p>Ng∆∞·ªùi xem: <span id="viewerCount">0</span></p>
  </header>
  <div class="main-content" id="mainContent">
    <!-- Video Area -->
    <div class="video-area">
      <div class="video-wrapper">
        <video id="liveVideo" class="video-element" autoplay playsinline controls muted></video>
        <div id="placeholder" class="video-placeholder">
          Ch·ªß ph√≤ng hi·ªán ch∆∞a chia s·∫ª m√†n h√¨nh
        </div>
      </div>
    </div>
    <!-- Chat Area -->
    <div class="chat-area" id="chatArea">
      <div class="chat-header">
        <span>Ph√≤ng Chat</span>
      </div>
      <div id="chatContent">
        <ul class="chat-messages" id="chatMessages"></ul>
        <div class="chat-input">
          <input type="text" id="messageInput" placeholder="Nh·∫≠p tin nh·∫Øn..." autocomplete="off" />
          <button id="sendBtn">G·ª≠i</button>
        </div>
      </div>
    </div>
    
  </div>
  <div id="roomEndedOverlay">
    <h2>üî¥ Bu·ªïi ph√°t tr·ª±c ti·∫øp ƒë√£ k·∫øt th√∫c</h2>
    <button onclick="window.location.href='https://hoctap-9a3.glitch.me/live'">
      Quay l·∫°i danh s√°ch Live
    </button>
  </div>
  
  <!-- socket.io cho chat v√† c√°c s·ª± ki·ªán kh√°c -->
  <script src="/socket.io/socket.io.js"></script>
  <!-- Import Firebase Signaling Module -->
  <script type="module">
    import { sendSignal, onNewSignal } from "/firebase-signaling.js";
    
    // C√†i ƒë·∫∑t Firebase signaling thay cho socket.io signaling cho WebRTC
    const roomId = "<%= room.id %>";
    const username = "<%= user.username %>";
    const viewerCount = document.getElementById("viewerCount");
    const chatMessages = document.getElementById("chatMessages");
    const messageInput = document.getElementById("messageInput");
    const sendBtn = document.getElementById("sendBtn");

    // Socket.IO cho chat
    const socket = io();
    socket.emit("joinRoom", { roomId, username });
    socket.on("userJoined", msg => {
      const li = document.createElement("li");
      li.innerHTML = `<i>${msg}</i>`;
      chatMessages.appendChild(li);
    });
    socket.on("newMessage", data => {
      const li = document.createElement("li");
      li.textContent = `${data.username}: ${data.message}`;
      chatMessages.appendChild(li);
    });
    socket.on("updateViewers", count => {
      viewerCount.textContent = count;
    });
    sendBtn.addEventListener("click", () => {
      const msg = messageInput.value.trim();
      if (!msg) return;
      socket.emit("chatMessage", { roomId, username, message: msg });
      messageInput.value = "";
    });
    messageInput.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        sendBtn.click();
      }
    });

    // WebRTC Setup cho Viewer s·ª≠ d·ª•ng Firebase signaling
    let pc;
    let remoteStream = new MediaStream();
    const liveVideo = document.getElementById("liveVideo");
    liveVideo.srcObject = remoteStream;

    // T·∫°o RTCPeerConnection v·ªõi c·∫•u h√¨nh ICE (c√°c STUN server)
    function createPeerConnection() {
      pc = new RTCPeerConnection({
        iceServers: [
          { urls: 'stun:stun.l.google.com:19302' },
          // C√°c STUN/ TURN server kh√°c n·∫øu c·∫ßn
        ],
        iceTransportPolicy: 'all'
      });
      // Khi c√≥ track t·ª´ remote, c·∫≠p nh·∫≠t video
      pc.ontrack = event => {
        if (event.streams && event.streams[0]) {
          liveVideo.srcObject = event.streams[0];
        } else {
          remoteStream.addTrack(event.track);
          liveVideo.srcObject = remoteStream;
        }
        document.getElementById("placeholder").style.display = "none";
        liveVideo.play().catch(err => console.error("Error playing remote video:", err));
      };
      // Khi c√≥ ICE candidate, g·ª≠i qua Firebase
      pc.onicecandidate = event => {
        if (event.candidate) {
          sendSignal(roomId, { type: "candidate", candidate: event.candidate });
        }
      };
      // X·ª≠ l√Ω ICE connection state thay ƒë·ªïi (t√πy ch·ªçn)
      pc.oniceconnectionstatechange = () => {
        console.log("ICE state:", pc.iceConnectionState);
      };
    }
    
    createPeerConnection();

    // L·∫Øng nghe t√≠n hi·ªáu m·ªõi t·ª´ Firebase
    onNewSignal(roomId, async (signal) => {
      if (!signal) return;
      console.log("Firebase signal received:", signal);
      
      if (signal.type === "offer") {
        // N·∫øu nh·∫≠n offer t·ª´ streamer, set remote description v√† t·∫°o answer
        await pc.setRemoteDescription(new RTCSessionDescription({ type: "offer", sdp: signal.sdp }));
        const answer = await pc.createAnswer();
        await pc.setLocalDescription(answer);
        sendSignal(roomId, { type: "answer", sdp: answer.sdp });
      } else if (signal.type === "answer") {
        // N·∫øu nh·∫≠n answer (kh√¥ng th∆∞·ªùng x·∫£y ra ·ªü viewer)
        await pc.setRemoteDescription(new RTCSessionDescription({ type: "answer", sdp: signal.sdp }));
      } else if (signal.type === "candidate") {
        try {
          await pc.addIceCandidate(signal.candidate);
        } catch (err) {
          console.error("Error adding ICE candidate", err);
        }
      }
    });
    
    // N·∫øu c·∫ßn, b·∫°n c√≥ th·ªÉ g·ª≠i keep-alive cho ph√≤ng qua socket.io nh∆∞ c≈©
    setInterval(() => {
      if (socket && roomId) {
        socket.emit("keepAlive", { roomId });
        console.log("Keep-alive sent for room:", roomId);
      }
    }, 15000);
  </script>
</body>
</html>
