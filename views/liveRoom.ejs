<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title><%= room.title %> - Live Room</title>
  <link rel="stylesheet" href="/style.css">
  <link rel="icon" type="image/png" href="https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/823029_library_512x512.png?v=1741523759119">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <div class="live-header">
    <div class="live-left">
      <h1 class="live-title">
        <i class="fas fa-video"></i> 
        Live Stream: <span class="stream-title"><%= room.title %></span>
      </h1>
    </div>
    <div class="live-right">
      <p class="viewer-info">
        <span class="viewer-icon">üëÄ</span> Ng∆∞·ªùi xem: 
        <span id="viewerCount" class="viewer-count">0</span>
      </p>
    </div>
  </div>
  <div class="container">
    <!-- Video Stream (nh·∫≠n stream t·ª´ ch·ªß ph√≤ng qua WebRTC) -->
    <div id="liveCamStream" class="video-placeholder">
      <h3>Live Video</h3>
      <video id="streamVideo" autoplay playsinline controls muted></video>
    </div>
    <!-- Khung chat -->
    <div id="chatBox">
      <h3>üí¨ Chat tr·ª±c ti·∫øp</h3>
      <ul id="chatMessages"></ul>
      <input type="hidden" id="username" value="<%= user.username %>">
      <input type="text" id="message" placeholder="Nh·∫≠p tin nh·∫Øn..." autocomplete="off">
      <button id="sendBtn">G·ª≠i</button>
    </div>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const roomId = "<%= room.id %>";
    const username = document.getElementById("username").value;
    const messageInput = document.getElementById("message");
    const sendBtn = document.getElementById("sendBtn");
    const chatMessages = document.getElementById("chatMessages");
    const viewerCount = document.getElementById("viewerCount");

    // Tham gia ph√≤ng
    socket.emit("joinRoom", { roomId, username });
    socket.on("userJoined", msg => {
      const li = document.createElement("li");
      li.innerHTML = `<i>${msg}</i>`;
      chatMessages.appendChild(li);
    });
    socket.on("newMessage", data => {
      const li = document.createElement("li");
      li.textContent = `${data.username}: ${data.message}`;
      chatMessages.appendChild(li);
    });
    socket.on("updateViewers", count => {
      viewerCount.textContent = count;
    });
    sendBtn.addEventListener("click", () => {
      const message = messageInput.value.trim();
      if (!message) return;
      socket.emit("chatMessage", { roomId, username, message });
      messageInput.value = "";
    });
    messageInput.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        sendBtn.click();
      }
    });

    // X·ª≠ l√Ω WebRTC ƒë·ªÉ nh·∫≠n screen share stream t·ª´ ch·ªß ph√≤ng
    let pc;
    socket.on("webrtcOffer", async ({ offer, roomId: offerRoomId }) => {
      if (offerRoomId !== roomId) return;
      pc = new RTCPeerConnection({ iceServers: [{ urls: "stun:stun.l.google.com:19302" }] });
      pc.ontrack = event => {
        const remoteStream = event.streams[0];
        const streamVideo = document.getElementById("streamVideo");
        streamVideo.srcObject = remoteStream;
      };
      pc.onicecandidate = event => {
        if (event.candidate) {
          socket.emit("webrtcCandidate", { roomId, candidate: event.candidate });
        }
      };
      await pc.setRemoteDescription(new RTCSessionDescription(offer));
      const answer = await pc.createAnswer();
      await pc.setLocalDescription(answer);
      socket.emit("webrtcAnswer", { roomId, answer });
    });
    socket.on("webrtcCandidate", async ({ candidate, roomId: candidateRoomId }) => {
      if (candidateRoomId !== roomId || !pc) return;
      try {
        await pc.addIceCandidate(new RTCIceCandidate(candidate));
      } catch (e) {
        console.error("Error adding ICE candidate", e);
      }
    });
  </script>
</body>
</html>
