<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title>Streamer Room - <%= room.title %></title>
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    /* B·ªï sung style cho b·∫£ng ƒëi·ªÅu khi·ªÉn v√† live cam */
    .control-panel {
      background: rgba(0,0,0,0.7);
      border-radius: 8px;
      padding: 15px;
      margin-top: 20px;
      display: flex;
      justify-content: space-around;
      align-items: center;
      flex-wrap: wrap;
    }
    .control-panel button {
      margin: 5px;
      padding: 10px 15px;
      font-size: 1em;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      background: #ff7cf7;
      color: #fff;
      transition: background 0.3s ease;
    }
    .control-panel button:hover {
      background: #e06ac7;
    }
    /* Live Cam / Screen Preview */
    #liveCamContainer {
      margin-top: 20px;
      text-align: center;
    }
    #liveCamVideo, #screenShareVideo {
      width: 100%;
      max-width: 600px;
      border: 2px solid #00ffea;
      border-radius: 8px;
      box-shadow: 0 0 15px rgba(0,255,234,0.6);
      margin-top: 10px;
    }
    #screenShareContainer {
      margin-top: 20px;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="live-header">
    <div class="live-left">
      <h1 class="live-title">
        <i class="fas fa-video"></i>
        Live Stream: <span class="stream-title"><%= room.title %></span>
      </h1>
    </div>
    <div class="live-right">
      <p class="viewer-info">
        <span class="viewer-icon">üëÄ</span> Ng∆∞·ªùi xem: 
        <span id="viewerCount" class="viewer-count">0</span>
      </p>
    </div>
  </div>

  <div class="container">
    <!-- Khung video ph√°t tr·ª±c ti·∫øp c·ªßa ch·ªß ph√≤ng -->
    <div id="videoStream">
      <div class="video-placeholder">[Video Stream c·ªßa b·∫°n]</div>
      <p>Ch·ªß ph√≤ng: <%= room.ownername %></p>
    </div>

    <!-- B·∫£ng ƒëi·ªÅu khi·ªÉn d√†nh cho ch·ªß ph√≤ng -->
    <div class="control-panel">
      <button id="startStreamBtn"><i class="fas fa-play"></i> B·∫Øt ƒë·∫ßu ph√°t</button>
      <button id="stopStreamBtn"><i class="fas fa-stop"></i> D·ª´ng ph√°t</button>
      <button id="endStreamBtn"><i class="fas fa-power-off"></i> K·∫øt th√∫c live</button>
      <!-- N√∫t chia s·∫ª m√†n h√¨nh -->
      <button id="shareScreenBtn"><i class="fas fa-desktop"></i> Chia s·∫ª m√†n h√¨nh</button>
    </div>
    
    <!-- Live Cam Preview (Webcam) -->
    <div id="liveCamContainer">
      <h3>Live Camera Preview</h3>
      <video id="liveCamVideo" autoplay muted playsinline></video>
    </div>

    <!-- Screen Share Preview -->
    <div id="screenShareContainer">
      <h3>Screen Share Preview</h3>
      <video id="screenShareVideo" autoplay muted playsinline></video>
    </div>
    
    <!-- Khung chat tr·ª±c ti·∫øp -->
    <div id="chatBox">
      <h3>üí¨ Chat tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi xem</h3>
      <ul id="chatMessages"></ul>
      <input type="hidden" id="username" value="<%= user.username %>">
      <input type="text" id="message" placeholder="Nh·∫≠p tin nh·∫Øn..." autocomplete="off">
      <button id="sendBtn">G·ª≠i</button>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const roomId = "<%= room.id %>";
    const username = document.getElementById("username").value;
    const messageInput = document.getElementById("message");
    const sendBtn = document.getElementById("sendBtn");
    const chatMessages = document.getElementById("chatMessages");
    const viewerCount = document.getElementById("viewerCount");

    // Tham gia ph√≤ng v·ªõi t√™n ch·ªß ph√≤ng
    socket.emit("joinRoom", { roomId, username });

    socket.on("userJoined", msg => {
      const li = document.createElement("li");
      li.innerHTML = `<i>${msg}</i>`;
      chatMessages.appendChild(li);
    });

    socket.on("newMessage", data => {
      const li = document.createElement("li");
      li.textContent = `${data.username}: ${data.message}`;
      chatMessages.appendChild(li);
    });

    socket.on("updateViewers", count => {
      viewerCount.textContent = count;
    });

    sendBtn.addEventListener("click", () => {
      const message = messageInput.value.trim();
      if (!message) return;
      socket.emit("chatMessage", { roomId, username, message });
      messageInput.value = "";
    });

    messageInput.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        sendBtn.click();
      }
    });

    // B·∫£ng ƒëi·ªÅu khi·ªÉn (control panel)
    document.getElementById("startStreamBtn").addEventListener("click", () => {
      socket.emit("controlStream", { roomId, action: "start" });
      alert("B·∫Øt ƒë·∫ßu ph√°t!");
    });
    document.getElementById("stopStreamBtn").addEventListener("click", () => {
      socket.emit("controlStream", { roomId, action: "stop" });
      alert("D·ª´ng ph√°t t·∫°m th·ªùi!");
    });
    document.getElementById("endStreamBtn").addEventListener("click", () => {
      socket.emit("controlStream", { roomId, action: "end" });
      alert("Live stream ƒë√£ k·∫øt th√∫c.");
      window.location.href = "https://hoctap-9a3.glitch.me/";
    });

    // --- Live Cam: Kh·ªüi t·∫°o webcam stream ---
    async function startLocalCam() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        const videoElement = document.getElementById("liveCamVideo");
        videoElement.srcObject = stream;
      } catch (err) {
        console.error("Error accessing webcam:", err);
        alert("Kh√¥ng th·ªÉ truy c·∫≠p webcam, vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p!");
      }
    }
    startLocalCam();

    // --- Screen Share: Kh·ªüi t·∫°o quay m√†n h√¨nh ---
    const shareScreenBtn = document.getElementById("shareScreenBtn");
    shareScreenBtn.addEventListener("click", async () => {
      try {
        const screenStream = await navigator.mediaDevices.getDisplayMedia({
          video: true,
          audio: true // Cho ph√©p chia s·∫ª √¢m thanh h·ªá th·ªëng (n·∫øu tr√¨nh duy·ªát h·ªó tr·ª£)
        });
        const screenVideo = document.getElementById("screenShareVideo");
        screenVideo.srcObject = screenStream;

        // Khi ng∆∞·ªùi d√πng d·ª´ng chia s·∫ª m√†n h√¨nh
        screenStream.getVideoTracks()[0].addEventListener("ended", () => {
          console.log("Ng∆∞·ªùi d√πng ƒë√£ d·ª´ng chia s·∫ª m√†n h√¨nh");
          screenVideo.srcObject = null;
        });
      } catch (err) {
        console.error("L·ªói khi chia s·∫ª m√†n h√¨nh:", err);
        alert("Kh√¥ng th·ªÉ chia s·∫ª m√†n h√¨nh, vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p ho·∫∑c tr√¨nh duy·ªát!");
      }
    });
  </script>
</body>
</html>
