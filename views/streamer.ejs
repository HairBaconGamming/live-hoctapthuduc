<!-- app/views/streamer.ejs -->
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title>Streamer Room - <%= room.title %></title>
  <link rel="stylesheet" href="/style.css">
  <link rel="icon" type="image/png" href="https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/823029_library_512x512.png?v=1741523759119">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    /* (CSS nh∆∞ c≈©) */
    .control-panel {
      position: relative;
      background: rgba(0,0,0,0.7);
      border-radius: 8px;
      padding: 15px;
      margin: 20px 0;
      transition: height 0.3s ease, padding 0.3s ease;
      overflow: hidden;
    }
    .control-panel.collapsed {
      height: 50px;
      padding: 5px;
    }
    .panel-toggle-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background: #ff7cf7;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      color: #fff;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .panel-content {
      display: flex;
      gap: 10px;
      transition: opacity 0.3s ease;
    }
    .control-panel.collapsed .panel-content {
      opacity: 0;
      pointer-events: none;
    }
    .control-panel button {
      margin: 5px;
      padding: 10px 15px;
      font-size: 1em;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      background: #ff7cf7;
      color: #fff;
      transition: background 0.3s ease;
    }
    .control-panel button:hover {
      background: #e06ac7;
    }
    #screenShareContainer {
      margin-top: 20px;
      text-align: center;
    }
    #screenShareContainer video {
      width: 100%;
      max-width: 400px;
      max-height: 400px;
      border: 2px solid #00ffea;
      border-radius: 8px;
      box-shadow: 0 0 15px rgba(0,255,234,0.6);
    }
  </style>
</head>
<body>
  <div class="live-header">
    <div class="live-left">
      <h1 class="live-title">
        <i class="fas fa-video"></i>
        Live Stream: <span class="stream-title"><%= room.title %></span>
      </h1>
    </div>
    <div class="live-right">
      <p class="viewer-info">
        <span class="viewer-icon">üëÄ</span> Ng∆∞·ªùi xem: 
        <span id="viewerCount" class="viewer-count">0</span> | 
        Th·ªùi gian m·ªü: <span id="openTime">00:00:00</span>
      </p>
    </div>
  </div>
  <div class="container">
    
    <!-- Control Panel -->
    <div class="control-panel" id="controlPanel">
      <button id="togglePanelBtn" class="panel-toggle-btn">
        <i class="fas fa-chevron-up"></i>
      </button>
      <div id="screenShareContainer">
        <h3>Screen Share Preview</h3>
        <video id="screenShareVideo" autoplay muted playsinline></video>
      </div>
      <div class="panel-content">
        <button id="endStreamBtn"><i class="fas fa-power-off"></i> K·∫øt th√∫c live</button>
        <button id="shareScreenBtn"><i class="fas fa-desktop"></i> Chia s·∫ª m√†n h√¨nh</button>
      </div>
    </div>
    
    <!-- Chat Box -->
    <div id="chatBox">
      <h3>üí¨ Chat tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi xem</h3>
      <ul id="chatMessages"></ul>
      <input type="hidden" id="username" value="<%= user.username %>">
      <input type="text" id="message" placeholder="Nh·∫≠p tin nh·∫Øn..." autocomplete="off">
      <button id="sendBtn">G·ª≠i</button>
    </div>
  </div>

  <!-- socket.io cho chat v√† c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi xem -->
  <script src="/socket.io/socket.io.js"></script>
  <!-- Import Firebase Signaling Module -->
  <script type="module">
    import { sendSignal, onNewSignal } from "/firebase-signaling.js";

    const socket = io();
    const roomId = "<%= room.id %>";
    const username = document.getElementById("username").value;
    const messageInput = document.getElementById("message");
    const sendBtn = document.getElementById("sendBtn");
    const chatMessages = document.getElementById("chatMessages");
    const viewerCount = document.getElementById("viewerCount");

    // C·∫≠p nh·∫≠t th·ªùi gian m·ªü ph√≤ng
    const roomCreatedAt = new Date("<%= room.createdAt %>");
    function updateOpenTime() {
      const now = new Date();
      const diff = now - roomCreatedAt;
      const hours = Math.floor(diff / (1000 * 60 * 60));
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((diff % (1000 * 60)) / 1000);
      document.getElementById("openTime").textContent =
        `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
    setInterval(updateOpenTime, 1000);
    updateOpenTime();

    // Tham gia ph√≤ng qua socket.io cho chat v√† c·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi xem
    socket.emit("joinRoom", { roomId, username });
    socket.on("userJoined", msg => {
      const li = document.createElement("li");
      li.innerHTML = `<i>${msg}</i>`;
      chatMessages.appendChild(li);
    });
    socket.on("newMessage", data => {
      const li = document.createElement("li");
      li.textContent = `${data.username}: ${data.message}`;
      chatMessages.appendChild(li);
    });
    socket.on("updateViewers", count => {
      viewerCount.textContent = count;
    });
    sendBtn.addEventListener("click", () => {
      const message = messageInput.value.trim();
      if (!message) return;
      socket.emit("chatMessage", { roomId, username, message });
      messageInput.value = "";
    });
    messageInput.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        sendBtn.click();
      }
    });

    // Control Panel Toggle
    const togglePanelBtn = document.getElementById('togglePanelBtn');
    const controlPanel = document.getElementById('controlPanel');
    togglePanelBtn.addEventListener('click', () => {
      controlPanel.classList.toggle('collapsed');
      togglePanelBtn.innerHTML = controlPanel.classList.contains('collapsed') 
        ? '<i class="fas fa-chevron-down"></i>' 
        : '<i class="fas fa-chevron-up"></i>';
    });

    // WebRTC Signaling s·ª≠ d·ª•ng Firebase cho Screen Share
    let localStream = null;
    let pc; // RTCPeerConnection ch√≠nh c·ªßa streamer
    const pcs = {}; // ƒê·ªëi v·ªõi m·ªói viewer, l∆∞u RTCPeerConnection ri√™ng
    const pendingViewers = []; // Viewer ƒëang ch·ªù t√≠n hi·ªáu

    // Khi c√≥ s·ª± ki·ªán "newViewer" qua socket.io, n·∫øu localStream ch∆∞a s·∫µn, l∆∞u l·∫°i viewer ƒë√≥
    socket.on("newViewer", async ({ viewerSocketId }) => {
      if (!localStream) {
        console.warn("Local stream ch∆∞a s·∫µn s√†ng, l∆∞u viewer:", viewerSocketId);
        pendingViewers.push(viewerSocketId);
        return;
      }
      createAndSendOffer(viewerSocketId);
    });

    // H√†m t·∫°o v√† g·ª≠i offer cho viewer qua Firebase signaling
    async function createAndSendOffer(viewerSocketId) {
      const pcForViewer = new RTCPeerConnection({
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
      });
      pcs[viewerSocketId] = pcForViewer;
      // Th√™m c√°c track t·ª´ localStream
      localStream.getTracks().forEach(track => pcForViewer.addTrack(track, localStream));
      pcForViewer.onicecandidate = event => {
        if (event.candidate) {
          sendSignal(roomId, { type: "candidate", candidate: event.candidate, target: viewerSocketId });
        }
      };
      // T·∫°o offer v√† g·ª≠i qua Firebase
      const offer = await pcForViewer.createOffer();
      await pcForViewer.setLocalDescription(offer);
      sendSignal(roomId, { type: "offer", sdp: offer.sdp, target: viewerSocketId });
    }

    // Khi ng∆∞·ªùi d√πng b·∫•m "Chia s·∫ª m√†n h√¨nh"
    document.getElementById("shareScreenBtn").addEventListener("click", async () => {
      try {
        localStream = await navigator.mediaDevices.getDisplayMedia({
          video: true,
          audio: true
        });
        const screenVideo = document.getElementById("screenShareVideo");
        screenVideo.srcObject = localStream;
        // Khi ng∆∞·ªùi d√πng d·ª´ng chia s·∫ª
        localStream.getVideoTracks()[0].addEventListener("ended", () => {
          console.log("User stopped screen sharing");
          screenVideo.srcObject = null;
          localStream = null;
          socket.emit("screenShareEnded", { roomId });
        });
        // Kh·ªüi t·∫°o RTCPeerConnection ch√≠nh (cho streamer)
        pc = new RTCPeerConnection({
          iceServers: [
            { urls: 'stun:stun.l.google.com:19302' }
          ],
          iceTransportPolicy: 'all'
        });
        localStream.getTracks().forEach(track => pc.addTrack(track, localStream));
        pc.onicecandidate = event => {
          if (event.candidate) {
            sendSignal(roomId, { type: "candidate", candidate: event.candidate });
          }
        };
        // G·ª≠i offer cho c√°c viewer ƒëang ch·ªù
        while (pendingViewers.length) {
          const viewerSocketId = pendingViewers.shift();
          await createAndSendOffer(viewerSocketId);
        }
      } catch (err) {
        console.error("Error during screen sharing:", err);
        alert("Kh√¥ng th·ªÉ chia s·∫ª m√†n h√¨nh. Vui l√≤ng ki·ªÉm tra quy·ªÅn ho·∫∑c th·ª≠ tr√¨nh duy·ªát kh√°c.");
      }
    });

    // L·∫Øng nghe t√≠n hi·ªáu m·ªõi t·ª´ Firebase cho signaling (cho c·∫£ streamer)
    onNewSignal(roomId, async (signal) => {
      // N·∫øu c√≥ target x√°c ƒë·ªãnh, ki·ªÉm tra xem t√≠n hi·ªáu c√≥ d√†nh cho m√¨nh kh√¥ng (streamer c√≥ th·ªÉ ki·ªÉm so√°t qua target n·∫øu c·∫ßn)
      if (signal.target && signal.target !== username) {
        return;
      }
      console.log("Firebase signal received (streamer):", signal);
      if (signal.type === "answer" && signal.target) {
        // Khi nh·∫≠n answer t·ª´ viewer
        let pcForViewer = pcs[signal.target];
        if (pcForViewer) {
          await pcForViewer.setRemoteDescription(new RTCSessionDescription({ type: "answer", sdp: signal.sdp }));
        }
      } else if (signal.type === "candidate") {
        // N·∫øu c√≥ target, √°p d·ª•ng cho peer connection c·ªßa viewer ƒë√≥; n·∫øu kh√¥ng, √°p d·ª•ng cho RTCPeerConnection ch√≠nh
        if (signal.target) {
          const pcForViewer = pcs[signal.target];
          if (pcForViewer) {
            try {
              await pcForViewer.addIceCandidate(signal.candidate);
            } catch (err) {
              console.error("Error adding ICE candidate for viewer", err);
            }
          }
        } else {
          try {
            await pc.addIceCandidate(signal.candidate);
          } catch (err) {
            console.error("Error adding ICE candidate", err);
          }
        }
      } else if (signal.type === "offer" && signal.target === username) {
        // N·∫øu streamer nh·∫≠n ƒë∆∞·ª£c offer d√†nh cho m√¨nh (th∆∞·ªùng kh√¥ng x·∫£y ra)
        await pc.setRemoteDescription(new RTCSessionDescription({ type: "offer", sdp: signal.sdp }));
        const answer = await pc.createAnswer();
        await pc.setLocalDescription(answer);
        sendSignal(roomId, { type: "answer", sdp: answer.sdp, target: signal.source });
      }
    });

    // Khi b·∫•m "K·∫øt th√∫c live"
    document.getElementById("endStreamBtn").addEventListener("click", () => {
      socket.emit("endRoom", { roomId });
      alert("Live stream ƒë√£ k·∫øt th√∫c.");
      window.location.href = "https://hoctap-9a3.glitch.me/";
    });
  </script>
</body>
</html>
