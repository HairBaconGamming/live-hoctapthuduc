<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title>Streamer Room - <%= room.title %></title>
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    /* Control Panel */
    .control-panel {
      position: relative;
      background: rgba(0,0,0,0.7);
      border-radius: 8px;
      padding: 15px;
      margin: 20px 0;
      transition: height 0.3s ease, padding 0.3s ease;
      overflow: hidden;
    }
    .control-panel.collapsed {
      height: 50px;
      padding: 5px;
    }
    .panel-toggle-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background: #ff7cf7;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      color: #fff;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .panel-content {
      display: flex;
      gap: 10px;
      transition: opacity 0.3s ease;
    }
    .control-panel.collapsed .panel-content {
      opacity: 0;
      pointer-events: none;
    }
    .control-panel button {
      margin: 5px;
      padding: 10px 15px;
      font-size: 1em;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      background: #ff7cf7;
      color: #fff;
      transition: background 0.3s ease;
    }
    .control-panel button:hover {
      background: #e06ac7;
    }
    /* Screen Share Preview */
    #screenShareContainer {
      margin-top: 20px;
      text-align: center;
    }
    #screenShareContainer video {
      width: 100%;
      max-width: 400px;
      max-height: 400px;
      border: 2px solid #00ffea;
      border-radius: 8px;
      box-shadow: 0 0 15px rgba(0,255,234,0.6);
    }
  </style>
</head>
<body>
  <div class="live-header">
    <div class="live-left">
      <h1 class="live-title">
        <i class="fas fa-video"></i>
        Live Stream: <span class="stream-title"><%= room.title %></span>
      </h1>
    </div>
    <div class="live-right">
      <p class="viewer-info">
        <span class="viewer-icon">üëÄ</span> Ng∆∞·ªùi xem: 
        <span id="viewerCount" class="viewer-count">0</span>
      </p>
    </div>
  </div>
  <div class="container">
    
    <!-- Control Panel v·ªõi toggle -->
    <div class="control-panel" id="controlPanel">
      <button id="togglePanelBtn" class="panel-toggle-btn">
        <i class="fas fa-chevron-up"></i>
      </button>
      <div id="screenShareContainer">
        <h3>Screen Share Preview</h3>
        <video id="screenShareVideo" autoplay muted playsinline></video>
      </div>
      <div class="panel-content">
        <button id="endStreamBtn"><i class="fas fa-power-off"></i> K·∫øt th√∫c live</button>
        <button id="shareScreenBtn"><i class="fas fa-desktop"></i> Chia s·∫ª m√†n h√¨nh</button>
      </div>
    </div>
    
    <!-- Khung chat -->
    <div id="chatBox">
      <h3>üí¨ Chat tr·ª±c ti·∫øp v·ªõi ng∆∞·ªùi xem</h3>
      <ul id="chatMessages"></ul>
      <input type="hidden" id="username" value="<%= user.username %>">
      <input type="text" id="message" placeholder="Nh·∫≠p tin nh·∫Øn..." autocomplete="off">
      <button id="sendBtn">G·ª≠i</button>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const roomId = "<%= room.id %>";
    const username = document.getElementById("username").value;
    const messageInput = document.getElementById("message");
    const sendBtn = document.getElementById("sendBtn");
    const chatMessages = document.getElementById("chatMessages");
    const viewerCount = document.getElementById("viewerCount");

    // Tham gia ph√≤ng
    socket.emit("joinRoom", { roomId, username });
    socket.on("userJoined", msg => {
      const li = document.createElement("li");
      li.innerHTML = `<i>${msg}</i>`;
      chatMessages.appendChild(li);
    });
    socket.on("newMessage", data => {
      const li = document.createElement("li");
      li.textContent = `${data.username}: ${data.message}`;
      chatMessages.appendChild(li);
    });
    socket.on("updateViewers", count => {
      viewerCount.textContent = count;
    });
    sendBtn.addEventListener("click", () => {
      const message = messageInput.value.trim();
      if (!message) return;
      socket.emit("chatMessage", { roomId, username, message });
      messageInput.value = "";
    });
    messageInput.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        sendBtn.click();
      }
    });

    // Control Panel Toggle
    const togglePanelBtn = document.getElementById('togglePanelBtn');
    const controlPanel = document.getElementById('controlPanel');
    togglePanelBtn.addEventListener('click', () => {
      controlPanel.classList.toggle('collapsed');
      if (controlPanel.classList.contains('collapsed')) {
        togglePanelBtn.innerHTML = '<i class="fas fa-chevron-down"></i>';
      } else {
        togglePanelBtn.innerHTML = '<i class="fas fa-chevron-up"></i>';
      }
    });

    document.getElementById("endStreamBtn").addEventListener("click", () => {
      socket.emit("controlStream", { roomId, action: "end" });
      alert("Live stream ƒë√£ k·∫øt th√∫c.");
      window.location.href = "https://hoctap-9a3.glitch.me/";
    });

    // Realtime Screen Share: S·ª≠ d·ª•ng WebRTC signaling qua Socket.IO
    let pc; // RTCPeerConnection for screen share
    document.getElementById("shareScreenBtn").addEventListener("click", async () => {
      try {
        const screenStream = await navigator.mediaDevices.getDisplayMedia({
          video: true,
          audio: true
        });
        // G√°n stream cho preview local
        const screenVideo = document.getElementById("screenShareVideo");
        screenVideo.srcObject = screenStream;
        // T·∫°o RTCPeerConnection
        pc = new RTCPeerConnection({ iceServers: [{ urls: "stun:stun.l.google.com:19302" }] });
        // Th√™m c√°c track t·ª´ screen share v√†o pc
        screenStream.getTracks().forEach(track => pc.addTrack(track, screenStream));
        // X·ª≠ l√Ω ICE candidate v√† g·ª≠i qua signaling
        pc.onicecandidate = event => {
          if (event.candidate) {
            socket.emit("webrtcCandidate", { roomId, candidate: event.candidate });
          }
        };
        // T·∫°o offer v√† g·ª≠i offer qua Socket.IO
        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);
        socket.emit("webrtcOffer", { roomId, offer });
        // Khi ng∆∞·ªùi d√πng d·ª´ng chia s·∫ª m√†n h√¨nh, g·ª° stream preview
        screenStream.getVideoTracks()[0].addEventListener("ended", () => {
          console.log("Ng∆∞·ªùi d√πng ƒë√£ d·ª´ng chia s·∫ª m√†n h√¨nh");
          screenVideo.srcObject = null;
        });
      } catch (err) {
        console.error("L·ªói khi chia s·∫ª m√†n h√¨nh realtime:", err);
        alert("Kh√¥ng th·ªÉ chia s·∫ª m√†n h√¨nh, vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p ho·∫∑c tr√¨nh duy·ªát!");
      }
    });
    
    // Khi ch·ªß ph√≤ng (streamer) nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán "newViewer"
    socket.on("newViewer", async ({ viewerSocketId }) => {
      console.log("C√≥ viewer m·ªõi, socket id:", viewerSocketId);
      // T·∫°o m·ªôt RTCPeerConnection m·ªõi cho viewer m·ªõi
      const pcForViewer = new RTCPeerConnection({ iceServers: [{ urls: "stun:stun.l.google.com:19302" }] });

      // Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ stream t·ª´ m√†n h√¨nh/chia s·∫ª c·ªßa ch·ªß ph√≤ng, v√≠ d·ª•: camStream
      // V√† b·∫°n ƒë√£ l∆∞u stream ƒë√≥ trong bi·∫øn "localStream"
      localStream.getTracks().forEach(track => {
        pcForViewer.addTrack(track, localStream);
      });

      pcForViewer.onicecandidate = event => {
        if (event.candidate) {
          socket.emit("webrtcCandidate", { roomId, candidate: event.candidate });
        }
      };

      // T·∫°o offer d√†nh ri√™ng cho viewer ƒë√≥
      const offer = await pcForViewer.createOffer();
      await pcForViewer.setLocalDescription(offer);
      // G·ª≠i offer tr·ª±c ti·∫øp t·ªõi viewer (targetSocketId)
      socket.emit("webrtcOffer", { roomId, offer, targetSocketId: viewerSocketId });
    });

    // Nh·∫≠n webrtcAnswer v√† ICE candidate t·ª´ kh√°ch (n·∫øu c√≥)
    socket.on("webrtcAnswer", async ({ answer, roomId: answerRoomId }) => {
      if (answerRoomId !== roomId || !pc) return;
      await pc.setRemoteDescription(new RTCSessionDescription(answer));
    });
    socket.on("webrtcCandidate", async ({ candidate, roomId: candidateRoomId }) => {
      if (candidateRoomId !== roomId || !pc) return;
      try {
        await pc.addIceCandidate(new RTCIceCandidate(candidate));
      } catch (e) {
        console.error("Error adding ICE candidate:", e);
      }
    });
  </script>
</body>
</html>
