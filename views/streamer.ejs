<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <title>Streamer Room - <%= room.title %></title>
  <link rel="stylesheet" href="/style.css">
  <link rel="icon" type="image/png" href="https://cdn.glitch.global/71030012-56ea-4d26-a426-e0099201df1c/823029_library_512x512.png?v=1741523759119">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
  <header>
    <h1 class="live-title">
      <i class="fas fa-video"></i>
      Live Stream: <span class="stream-title"><%= room.title %></span>
    </h1>
    <p>Người xem: <span id="viewerCount">0</span></p>
  </header>
  
  <!-- Container holding the streamer controls, preview, & chat -->
  <div class="container">
    <!-- Control Panel for Streamer -->
    <div class="control-panel" id="controlPanel">
      <button id="togglePanelBtn" class="panel-toggle-btn">
        <i class="fas fa-chevron-up"></i>
      </button>
      <div id="screenShareContainer">
        <h3>Screen Share Preview</h3>
        <video id="screenShareVideo" autoplay muted playsinline></video>
      </div>
      <div class="panel-content">
        <button id="endStreamBtn"><i class="fas fa-power-off"></i> Kết thúc live</button>
        <button id="shareScreenBtn"><i class="fas fa-desktop"></i> Chia sẻ màn hình</button>
      </div>
    </div>
    
    <!-- Chat Area -->
    <div class="chat-area" id="chatArea">
      <div class="chat-header">
        <span>Phòng Chat</span>
        <button id="toggleChatBtn"><i class="fas fa-chevron-right"></i></button>
      </div>
      <div id="chatContent">
        <ul class="chat-messages" id="chatMessages"></ul>
        <div class="chat-input">
          <input type="text" id="messageInput" placeholder="Nhập tin nhắn..." autocomplete="off" />
          <button id="sendBtn">Gửi</button>
        </div>
      </div>
    </div>
    
    <!-- Video Area for viewing incoming streams from viewers (if needed) -->
    <!-- In a typical streamer page, the streamer’s preview (screen share) is handled in the control panel -->
  </div>
  
  <script src="/socket.io/socket.io.js"></script>
  <script>
    // =========================
    // Socket.IO & Chat logic
    // =========================
    const socket = io();
    // For example purposes, we use roomId and username from server-side templating.
    const roomId = "<%= room.id %>";
    const username = "<%= user.username %>";
    const viewerCount = document.getElementById("viewerCount");
    const chatMessages = document.getElementById("chatMessages");
    const messageInput = document.getElementById("messageInput");
    const sendBtn = document.getElementById("sendBtn");

    socket.emit("joinRoom", { roomId, username });
    socket.on("userJoined", msg => {
      const li = document.createElement("li");
      li.innerHTML = `<i>${msg}</i>`;
      chatMessages.appendChild(li);
    });
    socket.on("newMessage", data => {
      const li = document.createElement("li");
      li.textContent = `${data.username}: ${data.message}`;
      chatMessages.appendChild(li);
    });
    socket.on("updateViewers", count => {
      viewerCount.textContent = count;
    });
    sendBtn.addEventListener("click", () => {
      const msg = messageInput.value.trim();
      if (!msg) return;
      socket.emit("chatMessage", { roomId, username, message: msg });
      messageInput.value = "";
    });
    messageInput.addEventListener("keypress", function(e) {
      if (e.key === "Enter") {
        e.preventDefault();
        sendBtn.click();
      }
    });

    // Toggle Chat Area
    const toggleChatBtn = document.getElementById("toggleChatBtn");
    const chatArea = document.getElementById("chatArea");
    const chatContent = document.getElementById("chatContent");
    toggleChatBtn.addEventListener("click", () => {
      if (chatContent.style.height === "0px" || chatContent.style.opacity === "0") {
        chatContent.style.height = "";
        chatContent.style.opacity = "1";
        chatArea.style.width = "350px";
        toggleChatBtn.innerHTML = '<i class="fas fa-chevron-right"></i>';
      } else {
        chatContent.style.height = "0";
        chatContent.style.opacity = "0";
        chatArea.style.width = "50px";
        toggleChatBtn.innerHTML = '<i class="fas fa-chevron-left"></i>';
      }
    });
    
    // Toggle Control Panel (Screen Share Preview & Buttons)
    const togglePanelBtn = document.getElementById("togglePanelBtn");
    const controlPanel = document.getElementById("controlPanel");
    togglePanelBtn.addEventListener("click", () => {
      controlPanel.classList.toggle("collapsed");
      if (controlPanel.classList.contains("collapsed")) {
        togglePanelBtn.innerHTML = '<i class="fas fa-chevron-down"></i>';
      } else {
        togglePanelBtn.innerHTML = '<i class="fas fa-chevron-up"></i>';
      }
    });
    
    document.getElementById("endStreamBtn").addEventListener("click", () => {
      socket.emit("controlStream", { roomId, action: "end" });
      alert("Live stream đã kết thúc.");
      window.location.href = "https://hoctap-9a3.glitch.me/";
    });
    
    // ===============================
    // WebRTC logic for Streamer Side
    // ===============================
    
    let localStream = null; // The stream captured from screen sharing
    // This object will map viewer socket IDs to their RTCPeerConnection instances.
    const peerConnections = {};

    // Start screen sharing when the "shareScreenBtn" is clicked.
    document.getElementById("shareScreenBtn").addEventListener("click", async () => {
      try {
        // Capture the screen (video + audio)
        localStream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });
        const screenShareVideo = document.getElementById("screenShareVideo");
        screenShareVideo.srcObject = localStream;
        console.log("Screen sharing started.");
  
        // When the user stops sharing, clear the preview.
        localStream.getVideoTracks()[0].addEventListener("ended", () => {
          console.log("Screen sharing stopped by user.");
          screenShareVideo.srcObject = null;
          localStream = null;
        });
  
      } catch (err) {
        console.error("Error during screen sharing:", err);
        alert("Cannot share screen. Please ensure you have the proper permissions or try a different browser.");
      }
    });
    
    // When a new viewer joins, receive a "newViewer" event with that viewer's socket ID.
    socket.on("newViewer", async ({ viewerSocketId }) => {
      if (!localStream) {
        console.error("No local stream available for sharing.");
        return;
      }
      console.log("New viewer joined:", viewerSocketId);
      
      // Create a new RTCPeerConnection for this viewer.
      const pc = new RTCPeerConnection({ iceServers: [{ urls: "stun:stun.l.google.com:19302" }] });
  
      // Store this connection in our mapping.
      peerConnections[viewerSocketId] = pc;
      
      // Add all tracks from localStream to this connection.
      localStream.getTracks().forEach(track => {
        pc.addTrack(track, localStream);
      });
      
      // Send ICE candidates to the viewer.
      pc.onicecandidate = event => {
        if (event.candidate) {
          socket.emit("webrtcCandidate", {
            roomId,
            candidate: event.candidate,
            targetSocketId: viewerSocketId
          });
        }
      };
      
      // Create an offer for this viewer.
      try {
        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);
        socket.emit("webrtcOffer", { roomId, offer, targetSocketId: viewerSocketId });
        console.log("Sent offer for viewer:", viewerSocketId);
      } catch (error) {
        console.error("Error creating offer for viewer:", viewerSocketId, error);
      }
    });
    
    // When a viewer sends an answer, set the remote description for that viewer’s connection.
    socket.on("webrtcAnswer", async ({ answer, targetSocketId, roomId: ansRoomId }) => {
      if (ansRoomId !== roomId) return;
      const pc = peerConnections[targetSocketId];
      if (!pc) {
        console.error("No peer connection found for viewer:", targetSocketId);
        return;
      }
      // Check that the signaling state is correct.
      if (pc.signalingState === "have-local-offer") {
        try {
          await pc.setRemoteDescription(new RTCSessionDescription(answer));
          console.log("Remote description set for viewer:", targetSocketId);
        } catch (error) {
          console.error("Error setting remote description for viewer:", targetSocketId, error);
        }
      } else {
        console.warn("Peer connection is in state", pc.signalingState, "for viewer:", targetSocketId);
      }
    });
    
    // When a new ICE candidate is received, add it to the appropriate connection.
    socket.on("webrtcCandidate", async ({ candidate, targetSocketId, roomId: candidateRoomId }) => {
      if (candidateRoomId !== roomId) return;
      const pc = peerConnections[targetSocketId];
      if (pc) {
        try {
          await pc.addIceCandidate(new RTCIceCandidate(candidate));
          console.log("Added ICE candidate for viewer:", targetSocketId);
        } catch (err) {
          console.error("Error adding ICE candidate for viewer:", targetSocketId, err);
        }
      }
    });
    
  </script>
</body>
</html>
